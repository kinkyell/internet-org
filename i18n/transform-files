#!/usr/bin/env php
<?php

require_once 'simplexml_debug/simplexml_dump.php';
require_once 'simplexml_debug/simplexml_tree.php';

require_once 'SerializedToXML.php';
require_once 'SimpleXMLElementExtended.php';

define( 'DEBUG_MODE', true );

$valid_exts = array( 'wxr', 'xml' );

if ( ! isset( $argv[1] ) ) {
	throw new Exception( 'Missing required argument <input-directory>' );
}
$input_dir = $argv[1];

if ( ! is_dir( $input_dir ) ) {
	throw new Exception( 'Invalid input directory specified' );
}

$output_dir = 'output';
if ( isset( $argv[2] ) ) {
	$output_dir = $argv[2];
}

// create the directory if it doesn't exist
if ( ! is_dir( $output_dir ) ) {
	mkdir( $output_dir );
}

// instantiate transformer, this will convert serialized content to xml for us
$transformer = new SerializedToXML();

$di = new DirectoryIterator( $input_dir );
foreach ( $di as $file ) {
	$path_parts = pathinfo( $file->getPathname() );

	if ( $file->isDot() || ! in_array( strtolower( $path_parts['extension'] ), $valid_exts ) ) {
		continue;
	}

    $dom = new DOMDocument();
    $dom->formatOutput = 1;
    $dom->load($file->getPathname());

    $rss = $dom->getElementsByTagName('rss')->item(0);
    
    $channels = $rss->getElementsByTagName('channel');
    for ($i = 0; $i < $channels->length; ++$i) {
        $channel = $channels->item($i);

        $items = $channel->getElementsByTagName('item');
        for ($j = 0; $j < $items->length; ++$j) {
            $item = $items->item($j);

            $itemChildNodes = $item->getElementsByTagNameNS('*', '*');
            for ($k = 0; $k < $itemChildNodes->length; ++$k) {
                $itemChildNode = $itemChildNodes->item($k);

                if (is_serialized($itemChildNode->nodeValue)) {
                    $importDom = new DOMDocument();
                    $result = $importDom->loadXml($transformer->unserialize($itemChildNode->nodeValue));

                    $newNode = $dom->importNode(
                        $importDom->childNodes->item(0),
                        true
                    );

                    while ($itemChildNode->childNodes->length > 0) {
                        $itemChildNode->removeChild($itemChildNode->childNodes->item(0));
                    }

                    $itemChildNode->appendChild($newNode);
                }
            }
        }
    }

    $dom->save($output_dir . DIRECTORY_SEPARATOR . $path_parts['basename']);
}










function debug( $str ) {
	if ( ! DEBUG_MODE ) {
		return;
	}
	echo $str . "\n";
}








function is_serialized( $data ) {
	// if it isn't a string, it isn't serialized
	if ( !is_string( $data ) )
		return false;
	$data = trim( $data );
	if ( 'N;' == $data )
		return true;
	if ( !preg_match( '/^([adObis]):/', $data, $badions ) )
		return false;
	switch ( $badions[1] ) {
		case 'a' :
		case 'O' :
		case 's' :
			if ( preg_match( "/^{$badions[1]}:[0-9]+:.*[;}]\$/s", $data ) )
				return true;
			break;
		case 'b' :
		case 'i' :
		case 'd' :
			if ( preg_match( "/^{$badions[1]}:[0-9.E-]+;\$/", $data ) )
				return true;
			break;
	}
	return false;
}
